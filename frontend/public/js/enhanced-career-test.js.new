/**
 * Enhanced Career Test System
 * This class implements an intelligent career recommendation system that:
 * 1. Matches user skills and interests to career paths
 * 2. Provides personalized learning recommendations
 * 3. Tracks user progress and history
 * 4. Offers detailed career insights and guidance
 */
class EnhancedCareerTest {
    /**
     * Initialize the career test system
     * - Sets up user context
     * - Initializes test history tracking
     * - Creates custom interests storage
     * - Configures API endpoints
     */
    constructor(options = {}) {
        // Default test configuration
        this.config = {
            container: document.getElementById('career-test-container'),
            resultsContainer: document.getElementById('career-suggestion'),
            apiBaseUrl: 'http://localhost:5000',
            offlineMode: false,
            ...options
        };
        
        // Apply configuration
        this.container = this.config.container;
        this.suggestionDiv = this.config.resultsContainer;
        this.apiBaseUrl = this.getApiBaseUrl() || this.config.apiBaseUrl;
        
        // Set up user context
        this.currentUser = this.getUserFromStorage();
        this.testHistory = [];
        
        // Set up UI elements
        this.form = null;
        this.skillsInput = null;
        this.progressBar = null;
        
        // Interest tracking
        this.selectedInterests = new Set();
        this.customInterests = new Set();
        
        // Predefined interest list for UI
        this.predefinedInterests = [
            'Web Development', 'Mobile Apps', 'Data Science', 'AI/Machine Learning',
            'Cybersecurity', 'Cloud Computing', 'DevOps', 'UX/UI Design',
            'Game Development', 'Blockchain', 'IoT', 'Software Architecture',
            'Digital Marketing', 'Product Management', 'Tech Writing', 'QA Testing',
            'Database Administration', 'Network Engineering', 'IT Support',
            'Business Analysis', 'Tech Sales', 'Tech Consulting', 'E-commerce',
            'FinTech', 'EdTech', 'HealthTech', 'AR/VR Development', 'Robotics'
        ];
        
        this.init();
    }

    /**
     * Determines the correct API base URL based on the environment
     * - Uses localhost:5000 for development
     * - Uses relative paths for production
     * @returns {string} The base URL for API calls
     */
    getApiBaseUrl() {
        // Get API URL from configuration if available
        if (window.appConfig && window.appConfig.apiUrl) {
            return window.appConfig.apiUrl;
        }
        
        // Default fallback URL
        return 'http://localhost:5000';
    }

    /**
     * Retrieves the current user's data from localStorage
     * @returns {Object|null} User data object or null if not logged in
     */
    getUserFromStorage() {
        const user = localStorage.getItem('user');
        return user ? JSON.parse(user) : null;
    }

    /**
     * Initializes all components of the career test:
     * 1. Renders interest selection interface
     * 2. Sets up event handlers
     * 3. Loads user's test history
     * 4. Initializes skill autocomplete
     */
    async init() {
        console.log('Initializing Enhanced Career Test components...');
        
        // Ensure container exists
        if (!this.container) {
            console.error('Career test container not found');
            return;
        }
        
        // Create basic structure
        this.createTestInterface();
        
        // Set references to DOM elements
        this.form = this.container.querySelector('#career-test-form');
        this.skillsInput = this.container.querySelector('#skills');
        this.progressBar = this.container.querySelector('.progress');
        
        // Create the interest selection interface
        this.renderInterestCheckboxes();
        
        // Set up form and interaction handlers
        this.setupEventListeners();
        
        // Load previous test results for the user
        this.loadUserHistory();
        
        // Initialize skill input suggestions
        this.setupSkillAutocomplete();
        
        // Initialize AI assessment
        this.initializeAIAssessment();
        
        console.log('Enhanced Career Test initialization complete');
    }

    /**
     * Creates the basic structure of the test interface
     */
    createTestInterface() {
        this.container.innerHTML = `
            <div class="career-test-content">
                <form id="career-test-form" class="needs-validation" novalidate>
                    <div class="mb-4">
                        <label for="skills" class="form-label">
                            <i class="bi bi-tools"></i> Skills & Technologies
                        </label>
                        <input type="text" class="form-control" id="skills" 
                               placeholder="Enter your skills separated by commas" required>
                        <div class="form-text">
                            Enter skills you have or are learning (e.g., JavaScript, Photoshop, Project Management)
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label class="form-label">
                            <i class="bi bi-heart"></i> Interests & Passions
                        </label>
                        <div id="interests-checkboxes" class="interests-container"></div>
                    </div>
                    
                    <div class="d-flex justify-content-between mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-search"></i> Find My Ideal Career Path
                        </button>
                    </div>
                    
                    <div class="progress mt-3" style="display: none;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" aria-valuenow="100" aria-valuemin="0" 
                             aria-valuemax="100" style="width: 100%"></div>
                    </div>
                </form>
            </div>
        `;
    }

    /**
     * Initializes the AI assessment functionality
     * Sets up event handlers and UI elements for AI-powered career assessment
     */
    initializeAIAssessment() {
        // Add submit handler for AI assessment
        this.form.addEventListener('submit', async (e) => {
            await this.processAIAssessment();
        });
    }

    /**
     * Processes the career test assessment based on user input
     * Collects user data, sends to database API, and displays results
     */
    async processAIAssessment() {
        try {
            // Show loading state
            this.showLoading();
            console.log('Starting career test assessment');

            // Collect form data
            const skills = this.skillsInput.value.split(',').map(s => s.trim()).filter(s => s);
            const interests = Array.from(document.querySelectorAll('input[name="interests"]:checked'))
                .map(cb => cb.value);
            
            // Add custom interests if any
            if (this.customInterests && this.customInterests.size > 0) {
                interests.push(...Array.from(this.customInterests));
            }

            // Ensure we have at least one skill or interest to prevent errors
            if (skills.length === 0 && interests.length === 0) {
                this.showError('Please enter at least one skill or select an interest');
                this.hideLoading();
                return;
            }

            // Prepare assessment data
            const assessmentData = {
                userId: this.currentUser?.id,
                skills: skills.length > 0 ? skills : ['programming'],
                interests: interests.length > 0 ? interests : ['technology']
            };

            // Use primary career test endpoint
            let response = null;
            
            // Try multiple API endpoints to increase chance of success
            const endpoints = [
                '/api/career-test/test',
                '/api/career/test'  // Alternate endpoint
            ];
            
            for (const ep of endpoints) {
                try {
                    console.log(`Trying endpoint: ${this.apiBaseUrl}${ep}`);
                    response = await fetch(`${this.apiBaseUrl}${ep}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-auth-token': localStorage.getItem('token')
                        },
                        body: JSON.stringify(assessmentData)
                    });
                    
                    if (response.ok) {
                        break;  // Success, exit loop
                    }
                } catch (error) {
                    console.warn(`Error with endpoint ${ep}:`, error);
                }
            }
            
            // If all API calls fail, use local fallback
            if (!response || !response.ok) {
                console.warn('Career Test API Error. Using local fallback mechanism.');
                const fallbackResult = this.getLocalFallbackResults(skills, interests);
                console.log('Using local fallback data:', fallbackResult);
                
                // Display results
                this.displayResults(fallbackResult);
                
                // Save to history locally
                this.saveHistoryLocally(fallbackResult);
                return;
            }

            // API call succeeded
            const result = await response.json();
            console.log('Career test results received:', result);
            
            // Display results
            this.displayResults(result);
            
            // Save to history
            await this.saveAssessmentHistory(result);

        } catch (error) {
            console.error('Career Test Error:', error);
            this.showError('Failed to complete career test. Please try again.');
        } finally {
            this.hideLoading();
        }
    }

    /**
     * Displays the career test results in the UI
     * @param {Object} results - The career test results from database
     */
    displayResults(results) {
        if (!results || !results.matches || !Array.isArray(results.matches) || results.matches.length === 0) {
            this.showError('No career matches found. Please try with different skills and interests.');
            return;
        }
        
        // Sort matches by score (descending)
        const sortedMatches = [...results.matches].sort((a, b) => b.score - a.score);
        
        // Create results HTML
        let resultsHTML = `
            <div class="career-test-results">
                <h3>🎯 Recommended Career Paths</h3>
                <p class="text-muted">Based on ${results.totalCareersAnalyzed || 0} career paths analyzed</p>
                
                <div class="recommended-careers">
        `;
        
        // Add each career match
        sortedMatches.forEach(match => {
            const matchedSkills = match.matchedSkills && Array.isArray(match.matchedSkills) ? match.matchedSkills : [];
            const matchedInterests = match.matchedInterests && Array.isArray(match.matchedInterests) ? match.matchedInterests : [];
            
            resultsHTML += `
                <div class="career-match card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4>${match.title || 'Career Path'}</h4>
                        <span class="badge bg-primary">${match.score || 0}% Match</span>
                    </div>
                    <div class="card-body">
                        <p>${match.description || 'No description available'}</p>
                        
                        <div class="matched-items mt-3">
                            <h5>Matched Skills:</h5>
                            <div class="badges">
                                ${matchedSkills.length > 0 
                                    ? matchedSkills.map(skill => `<span class="badge bg-success me-2 mb-2">${skill}</span>`).join('') 
                                    : '<span class="text-muted">No specific skills matched</span>'}
                            </div>
                            
                            <h5 class="mt-3">Matched Interests:</h5>
                            <div class="badges">
                                ${matchedInterests.length > 0
                                    ? matchedInterests.map(interest => `<span class="badge bg-info me-2 mb-2">${interest}</span>`).join('')
                                    : '<span class="text-muted">No specific interests matched</span>'}
                            </div>
                        </div>
                        
                        ${match.courses && Array.isArray(match.courses) && match.courses.length > 0 ? `
                        <div class="recommended-courses mt-4">
                            <h5>Recommended Courses:</h5>
                            <ul class="list-group">
                                ${match.courses.map(course => `
                                    <li class="list-group-item">
                                        <a href="${course.url || '#'}" class="course-link">
                                            ${course.name || 'Course'}
                                        </a>
                                        <span class="badge bg-secondary float-end">${course.level || 'Beginner'}</span>
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        resultsHTML += `
                </div>
            </div>
        `;
        
        // Update UI
        this.suggestionDiv.innerHTML = resultsHTML;
        this.suggestionDiv.style.display = 'block';
    }
    
    /**
     * Generates fallback career recommendations when all API calls fail
     * @param {Array} skills - User's skills
     * @param {Array} interests - User's interests
     * @returns {Object} Fallback results object
     */
    getLocalFallbackResults(skills, interests) {
        // Basic career paths with associated skills and interests
        const careerPaths = [
            {
                title: "Full Stack Web Developer",
                description: "Develop both client and server-side applications",
                skills: ["javascript", "html", "css", "node", "react", "angular", "vue", "express", "mongodb", "sql"],
                interests: ["web development", "programming", "software engineering", "coding", "development"],
                score: 85,
                courses: [
                    { name: "Modern JavaScript from the Beginning", url: "#", level: "Beginner" },
                    { name: "React - The Complete Guide", url: "#", level: "Intermediate" },
                    { name: "Node.js API Masterclass", url: "#", level: "Advanced" }
                ]
            },
            {
                title: "Data Scientist",
                description: "Analyze and interpret complex data to help make business decisions",
                skills: ["python", "r", "statistics", "machine learning", "sql", "tensorflow", "pytorch", "pandas", "numpy"],
                interests: ["data", "analytics", "statistics", "machine learning", "ai", "mathematics"],
                score: 80,
                courses: [
                    { name: "Python for Data Science", url: "#", level: "Beginner" },
                    { name: "Machine Learning A-Z", url: "#", level: "Intermediate" },
                    { name: "Deep Learning Specialization", url: "#", level: "Advanced" }
                ]
            },
            {
                title: "Mobile App Developer",
                description: "Create applications for mobile devices such as smartphones and tablets",
                skills: ["java", "kotlin", "swift", "flutter", "react native", "android", "ios", "mobile development"],
                interests: ["mobile development", "app development", "ui design", "user experience"],
                score: 78,
                courses: [
                    { name: "Flutter & Dart - The Complete Guide", url: "#", level: "Beginner" },
                    { name: "iOS & Swift - The Complete iOS App Development Bootcamp", url: "#", level: "Intermediate" }
                ]
            }
        ];
        
        // Calculate match scores for each career
        const matches = careerPaths.map(career => {
            let matchedSkills = [];
            let matchedInterests = [];
            
            // Find matched skills
            skills.forEach(skill => {
                const skillLower = skill.toLowerCase();
                if (career.skills.some(s => s.includes(skillLower) || skillLower.includes(s))) {
                    matchedSkills.push(skill);
                }
            });
            
            // Find matched interests
            interests.forEach(interest => {
                const interestLower = interest.toLowerCase();
                if (career.interests.some(i => i.includes(interestLower) || interestLower.includes(i))) {
                    matchedInterests.push(interest);
                }
            });
            
            // Adjust score based on matches
            let adjustedScore = career.score;
            if (matchedSkills.length > 0) {
                adjustedScore += 5;
            }
            if (matchedInterests.length > 0) {
                adjustedScore += 5;
            }
            
            return {
                title: career.title,
                description: career.description,
                score: Math.min(adjustedScore, 100),
                matchedSkills: matchedSkills,
                matchedInterests: matchedInterests,
                courses: career.courses
            };
        });
        
        // Sort by score (descending)
        matches.sort((a, b) => b.score - a.score);
        
        return {
            matches: matches,
            matchesFound: matches.length,
            totalCareersAnalyzed: careerPaths.length,
            source: 'local-fallback',
            timestamp: new Date().toISOString()
        };
    }

    /**
     * Shows loading state during AI assessment
     */
    showLoading() {
        this.progressBar.style.display = 'block';
        this.form.classList.add('loading');
    }

    /**
     * Hides loading state
     */
    hideLoading() {
        this.progressBar.style.display = 'none';
        this.form.classList.remove('loading');
    }

    /**
     * Shows error message
     * @param {string} message - The error message to display
     */
    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger mt-3';
        errorDiv.textContent = message;
        
        // Remove any existing error messages
        const existingError = this.form.querySelector('.alert-danger');
        if (existingError) {
            existingError.remove();
        }
        
        // Add the new error message after the form
        this.form.parentNode.insertBefore(errorDiv, this.form.nextSibling);
        
        // Automatically remove after 5 seconds
        setTimeout(() => {
            errorDiv.remove();
        }, 5000);
    }

    /**
     * Saves the assessment results to user history
     * @param {Object} result - The career test result to save
     */
    async saveAssessmentHistory(result) {
        // Always save locally first to ensure we have a copy
        this.saveHistoryLocally(result);
        
        // Skip API calls if no user is logged in
        if (!this.currentUser || !localStorage.getItem('token')) {
            console.log('Skipping remote history save - user not logged in');
            return;
        }
        
        try {
            // Set a timeout to abort API calls that take too long
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout
            
            // Try multiple endpoints for saving history
            const endpoints = [
                '/api/career/history',
                '/api/career-test/history'
            ];
            
            let success = false;
            
            for (const ep of endpoints) {
                try {
                    console.log(`Trying to save history using endpoint: ${this.apiBaseUrl}${ep}`);
                    const response = await fetch(`${this.apiBaseUrl}${ep}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-auth-token': localStorage.getItem('token')
                        },
                        body: JSON.stringify({
                            testResult: result,
                            timestamp: new Date().toISOString()
                        }),
                        signal: controller.signal
                    });
                    
                    if (response.ok) {
                        console.log(`Successfully saved history with endpoint ${ep}`);
                        success = true;
                        break;
                    }
                } catch (endpointError) {
                    console.warn(`Error saving history with endpoint ${ep}:`, endpointError);
                    // Continue to next endpoint
                }
            }
            
            clearTimeout(timeoutId); // Clear the timeout
            
            if (!success) {
                // Try with a different API URL
                if (window.appConfig && typeof window.appConfig.tryNextFallback === 'function') {
                    const fallbackApiUrl = window.appConfig.tryNextFallback();
                    this.apiBaseUrl = fallbackApiUrl;
                    
                    try {
                        // Try both valid endpoints with the fallback URL
                        for (const ep of ['/api/career/history', '/api/career-test/history']) {
                            try {
                                console.log(`Trying fallback history endpoint: ${fallbackApiUrl}${ep}`);
                                const response = await fetch(`${fallbackApiUrl}${ep}`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'x-auth-token': localStorage.getItem('token')
                                    },
                                    body: JSON.stringify({
                                        testResult: result,
                                        timestamp: new Date().toISOString()
                                    })
                                });
                                
                                if (response.ok) {
                                    success = true;
                                    break;
                                }
                            } catch (endpointError) {
                                console.warn(`Error with fallback endpoint ${ep}:`, endpointError);
                            }
                        }
                    } catch (fallbackError) {
                        console.warn('Failed to save history using fallback API URLs:', fallbackError);
                    }
                }
            }
            
            if (success) {
                // Reload history after successful save
                await this.loadUserHistory();
            } else {
                // Store history in local storage as last resort
                this.saveHistoryLocally(result);
            }
        } catch (error) {
            console.error('Error saving assessment history:', error);
            // Save locally as backup
            this.saveHistoryLocally(result);
        }
    }
    
    /**
     * Saves assessment history locally when API fails
     * @param {Object} result - The assessment result to save
     */
    saveHistoryLocally(result) {
        try {
            // Get existing history or initialize empty array
            const localHistory = JSON.parse(localStorage.getItem('careerAssessmentHistory') || '[]');
            
            // Add new result with timestamp
            localHistory.push({
                result: result,
                timestamp: new Date().toISOString(),
                pendingSync: true
            });
            
            // Save back to local storage
            localStorage.setItem('careerAssessmentHistory', JSON.stringify(localHistory));
            console.log('Saved assessment history locally');
        } catch (localSaveError) {
            console.error('Failed to save history locally:', localSaveError);
        }
    }

    renderInterestCheckboxes() {
        const container = document.getElementById('interests-checkboxes');
        if (!container) return;

        // Comprehensive list of career interests across various domains
        const enhancedInterestsList = [
            // Technology & Development
            "Programming", "Web Development", "Data Science", "Machine Learning", "AI", 
            "Cybersecurity", "Mobile Development", "Game Development", "DevOps", "Cloud Computing",
            "UI/UX Design", "Graphic Design", "Product Design", "Visual Design", "Creative Arts",
            "Digital Marketing", "SEO", "Social Media Marketing", "Content Marketing", "Email Marketing",
            "Business Strategy", "Entrepreneurship", "Project Management", "Product Management", "Leadership",
            "Data Analysis", "Statistics", "Research", "Mathematics", "Finance",
            "Writing", "Content Creation", "Copywriting", "Technical Writing", "Journalism",
            "Education", "Training", "Mentoring", "Community Building", "Social Impact",
            "Healthcare", "Mental Health", "Wellness", "Fitness", "Nutrition",
            "Music", "Video Production", "Photography", "Animation", "Film Making",
            "Sales", "Customer Service", "Public Relations", "Consulting", "Human Resources",
            "Architecture", "Engineering", "Manufacturing", "Supply Chain", "Logistics",
            "Law", "Compliance", "Risk Management", "Quality Assurance", "Testing",
            "Blockchain", "Cryptocurrency", "FinTech", "Biomedical Engineering", "Environmental Science",
            "Robotics", "3D Modeling", "Game Design", "Virtual Reality", "Augmented Reality"
        ];

        // Create the clickable interest badges
        const interestsHTML = enhancedInterestsList.map(interest =>
            `<span class="interest-badge badge bg-light text-dark border me-2 mb-2" 
                   data-interest="${interest}" 
                   style="cursor: pointer; transition: all 0.3s ease;"
                   onclick="careerTest.toggleInterest('${interest}', this)">
                ${interest}
            </span>`
        ).join('');

        // Add custom interest input section
        const customInterestHTML = `
            <div class="mt-3 p-3 border rounded bg-light">
                <h6 class="mb-2">
                    <i class="bi bi-plus-circle"></i> Add Custom Interests
                </h6>
                <div class="input-group">
                    <input type="text" 
                           class="form-control" 
                           id="custom-interest-input" 
                           placeholder="e.g. Space Technology, Sustainable Energy, Food Science..."
                           list="interest-suggestions">
                    <button class="btn btn-outline-primary" type="button" id="add-interest-btn">
                        <i class="bi bi-plus"></i> Add
                    </button>
                </div>
                <div class="form-text">Can't find your interest? Add it here! We'll include it in your career matching.</div>
                <div id="custom-interests-display" class="mt-2"></div>
                
                <!-- Datalist for suggestions -->
                <datalist id="interest-suggestions">
                    <option value="Space Technology">
                    <option value="Renewable Energy">
                    <option value="Sustainable Development">
                    <option value="Food Science">
                    <option value="Biotechnology">
                    <option value="Nanotechnology">
                    <option value="Quantum Computing">
                    <option value="Internet of Things">
                    <option value="Smart Cities">
                    <option value="Digital Art">
                    <option value="Podcasting">
                    <option value="E-sports">
                    <option value="Climate Change">
                    <option value="Mental Health Advocacy">
                    <option value="Social Justice">
                    <option value="Cultural Preservation">
                    <option value="Language Learning">
                    <option value="Travel Technology">
                    <option value="Pet Care Technology">
                    <option value="Fashion Technology">
                </datalist>
            </div>
        `;

        container.innerHTML = interestsHTML + customInterestHTML;

        // Setup custom interest functionality
        this.setupCustomInterests();
        
        // Initialize selected interests tracking
        this.selectedInterests = new Set();
    }

    toggleInterest(interest, element) {
        if (this.selectedInterests.has(interest)) {
            // Deselect
            this.selectedInterests.delete(interest);
            element.classList.remove('selected');
            element.classList.add('bg-light', 'text-dark');
        } else {
            // Select
            this.selectedInterests.add(interest);
            element.classList.add('selected');
            element.classList.remove('bg-light', 'text-dark');
        }
        this.updateInterestCounter();
    }

    setupCustomInterests() {
        const addBtn = document.getElementById('add-interest-btn');
        const input = document.getElementById('custom-interest-input');
        const display = document.getElementById('custom-interests-display');

        if (!addBtn || !input || !display) return;

        // Store custom interests
        this.customInterests = new Set();

        // Add interest function
        const addInterest = () => {
            const interest = input.value.trim();
            if (interest && !this.customInterests.has(interest)) {
                this.customInterests.add(interest);
                this.renderCustomInterests();
                input.value = '';
                this.updateInterestCounter();
            }
        };

        // Event listeners
        addBtn.addEventListener('click', addInterest);
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                addInterest();
            }
        });

        // Auto-suggestion on input
        input.addEventListener('input', () => {
            this.showInterestSuggestions(input.value);
        });
    }

    renderCustomInterests() {
        const display = document.getElementById('custom-interests-display');
        if (!display) return;

        if (this.customInterests.size === 0) {
            display.innerHTML = '';
            return;
        }

        display.innerHTML = `
            <div class="mt-2">
                <small class="text-muted">Your custom interests:</small><br>
                ${Array.from(this.customInterests).map(interest => `
                    <span class="badge me-1 mb-1" style="background-color: var(--tertiary-accent); color: white;">
                        ${interest}
                        <button type="button" class="btn-close btn-close-white ms-1" 
                                onclick="careerTest.removeCustomInterest('${interest}')" 
                                style="font-size: 0.6em;">
                        </button>
                    </span>
                `).join('')}
            </div>
        `;
    }

    removeCustomInterest(interest) {
        this.customInterests.delete(interest);
        this.renderCustomInterests();
        this.updateInterestCounter();
    }

    showInterestSuggestions(inputValue) {
        // This could be expanded to show dynamic suggestions
        // based on the input value in the future
    }

    setupSkillAutocomplete() {
        const skillsInput = document.getElementById('skills');
        if (!skillsInput) return;

        const commonSkills = [
            'JavaScript', 'Python', 'Java', 'C++', 'HTML', 'CSS', 'React', 'Node.js', 'SQL', 'Git',
            'Photoshop', 'Illustrator', 'Figma', 'Adobe Creative Suite', 'AutoCAD', 'Sketch',
            'Excel', 'PowerPoint', 'Google Analytics', 'Salesforce', 'HubSpot', 'WordPress',
            'Project Management', 'Leadership', 'Communication', 'Teamwork', 'Problem Solving',
            'Data Analysis', 'Machine Learning', 'Statistics', 'Research', 'Critical Thinking',
            'SEO', 'Social Media', 'Content Writing', 'Marketing', 'Sales', 'Customer Service',
            'Public Speaking', 'Presentation', 'Negotiation', 'Time Management', 'Organization'
        ];

        // Create datalist for autocomplete
        const datalist = document.createElement('datalist');
        datalist.id = 'skills-suggestions';
        datalist.innerHTML = commonSkills.map(skill => `<option value="${skill}">`).join('');
        skillsInput.setAttribute('list', 'skills-suggestions');
        skillsInput.parentNode.appendChild(datalist);

        // Add placeholder with examples
        skillsInput.placeholder = 'e.g. JavaScript, Python, Leadership, Design...';
    }

    setupEventListeners() {
        const form = document.getElementById('career-test-form');
        if (!form) return;

        form.addEventListener('submit', (e) => this.handleFormSubmit(e));

        // Add real-time skill validation
        const skillsInput = document.getElementById('skills');
        if (skillsInput) {
            skillsInput.addEventListener('blur', () => this.validateSkills());
        }

        // Initialize interest counter
        this.updateInterestCounter();

        // Add history toggle button
        this.addHistoryButton();
    }

    validateSkills() {
        const skillsInput = document.getElementById('skills');
        const skills = skillsInput.value.split(',').map(s => s.trim()).filter(s => s.length > 0);
        
        const feedback = document.getElementById('skills-feedback') || this.createSkillsFeedback();
        
        if (skills.length === 0) {
            feedback.textContent = 'Please enter at least one skill';
            feedback.className = 'text-warning small';
        } else if (skills.length < 3) {
            feedback.textContent = `Good! Consider adding ${3 - skills.length} more skill(s) for better matches`;
            feedback.className = 'text-info small';
        } else {
            feedback.textContent = `Great! ${skills.length} skills will help find accurate matches`;
            feedback.className = 'text-success small';
        }
    }

    createSkillsFeedback() {
        const feedback = document.createElement('div');
        feedback.id = 'skills-feedback';
        feedback.className = 'small text-muted mt-1';
        document.getElementById('skills').parentNode.appendChild(feedback);
        return feedback;
    }

    updateInterestCounter() {
        const counter = document.getElementById('interest-counter') || this.createInterestCounter();
        
        const selectedCount = this.selectedInterests ? this.selectedInterests.size : 0;
        const customCount = this.customInterests ? this.customInterests.size : 0;
        const totalCount = selectedCount + customCount;
        
        const countText = totalCount === 1 ? 'interest' : 'interests';
        const breakdown = customCount > 0 ? 
            ` (${selectedCount} selected + ${customCount} custom)` : '';
        
        counter.textContent = `${totalCount} ${countText} selected${breakdown}`;
        
        if (totalCount === 0) {
            counter.className = 'small text-warning';
        } else if (totalCount < 5) {
            counter.className = 'small text-info';
        } else {
            counter.className = 'small text-success';
        }
    }

    createInterestCounter() {
        const counter = document.createElement('div');
        counter.id = 'interest-counter';
        counter.className = 'small text-muted mt-2';
        document.getElementById('interests-checkboxes').parentNode.appendChild(counter);
        return counter;
    }

    addHistoryButton() {
        if (!this.currentUser) return;

        const form = document.getElementById('career-test-form');
        const historyBtn = document.createElement('button');
        historyBtn.type = 'button';
        historyBtn.className = 'btn btn-outline-secondary me-2';
        historyBtn.innerHTML = 'View Test History';
        historyBtn.onclick = () => this.toggleHistory();
        
        const submitBtn = form.querySelector('button[type="submit"]');
        submitBtn.parentNode.insertBefore(historyBtn, submitBtn);
    }

    /**
     * Handles the career test form submission
     * 
     * Career Matching Algorithm:
     * 1. Skills Analysis:
     *    - Exact matches: Direct skill matches (e.g., "JavaScript" = "JavaScript")
     *    - Fuzzy matches: Similar skills (e.g., "JS" ≈ "JavaScript")
     *    - Skill families: Related skills (e.g., "React" → "Frontend Development")
     * 
     * 2. Interest Mapping:
     *    - Primary interests: Direct field matches
     *    - Related interests: Connected fields
     *    - Interest weights: Higher priority to strong matches
     * 
     * 3. Career Score Calculation:
     *    - Skill match weight: 60%
     *    - Interest match weight: 40%
     *    - Confidence score: Based on data quality
     * 
     * 4. Results Processing:
     *    - Filters high-confidence matches
     *    - Ranks careers by match score
     *    - Adds learning recommendations
     * 
     * @param {Event} e - Form submission event
     */
    async handleFormSubmit(e) {
        e.preventDefault();
        console.log('Form submitted - Enhanced Career Test');
        
        const submitBtn = e.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        
        try {
            // Show loading state
            submitBtn.innerHTML = 'Analyzing...';
            submitBtn.disabled = true;

            const skills = document.getElementById('skills').value
                .split(',')
                .map(s => s.trim())
                .filter(s => s.length > 0);
            
            const interests = Array.from(this.selectedInterests || [])
                .concat(Array.from(this.customInterests || [])); // Include custom interests

            console.log('Skills:', skills);
            console.log('Interests:', interests);

            if (skills.length === 0 && interests.length === 0) {
                throw new Error('Please provide at least one skill or interest');
            }

            const requestBody = {
                skills,
                interests,
                userId: this.currentUser?._id,
                saveResults: !!this.currentUser
            };

            console.log('Sending request:', requestBody);

            // Try multiple API endpoints to increase chance of success
            let response;
            let endpoint;
            const endpoints = [
                '/api/career-test/test',
                '/api/career/test'  // Alternate endpoint
            ];

            for (const ep of endpoints) {
                try {
                    console.log(`Trying endpoint: ${this.apiBaseUrl}${ep}`);
                    response = await fetch(`${this.apiBaseUrl}${ep}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestBody)
                    });
                    
                    console.log(`Response from ${ep}: ${response.status}`);
                    
                    if (response.ok) {
                        endpoint = ep;
                        break; // Success, exit loop
                    }
                } catch (fetchError) {
                    console.warn(`Error with endpoint ${ep}:`, fetchError);
                }
            }

            // If all endpoints failed, try using a fallback API URL
            if (!response || !response.ok) {
                // Try fallback API URL
                if (window.appConfig && typeof window.appConfig.tryNextFallback === 'function') {
                    const fallbackApiUrl = window.appConfig.tryNextFallback();
                    this.apiBaseUrl = fallbackApiUrl;
                    console.log(`Retrying with fallback API URL: ${fallbackApiUrl}`);
                    
                    try {
                        response = await fetch(`${fallbackApiUrl}/api/career/test`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(requestBody)
                        });
                    } catch (fallbackError) {
                        console.warn('Fallback API URL also failed:', fallbackError);
                    }
                }
            }

            console.log('Final response status:', response ? response.status : 'No response');

            // If still failed, use the guaranteed matches fallback
            if (!response || !response.ok) {
                console.warn(`API Error. Using fallback mechanism.`);
                if (typeof this.getGuaranteedMatches === 'function') {
                    const data = this.getGuaranteedMatches(skills, interests);
                    console.log('Using fallback data:', data);
                    this.displayEnhancedResults(data);
                    return;
                } else {
                    throw new Error(`API request failed: ${response ? response.status : 'No connection'}`);
                }
            }

            const data = await response.json();
            console.log('Response data:', data);
            this.displayEnhancedResults(data);
            
            // Update history if user is logged in
            if (this.currentUser) {
                await this.loadUserHistory();
            }

        } catch (error) {
            console.error('Career test error:', error);
            this.displayError(error.message);
        } finally {
            // Restore button state
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    /**
     * Displays the career match results with detailed insights
     * 
     * Result Components:
     * 1. Overall Match Score:
     *    - Percentage match with career path
     *    - Confidence level in the match
     * 
     * 2. Skill Analysis:
     *    - Matched skills with confidence levels
     *    - Missing critical skills
     *    - Skill development suggestions
     * 
     * 3. Career Path Details:
     *    - Career description
     *    - Required qualifications
     *    - Industry insights
     *    - Salary ranges
     * 
     * 4. Learning Recommendations:
     *    - Suggested courses
     *    - Learning path progression
     *    - Skill development timeline
     * 
     * @param {Object} data - Career match results data
     */
    displayEnhancedResults(data) {
        const container = document.getElementById('career-suggestion');
        
        if (!data.matches || data.matches.length === 0) {
            this.displayError('No career matches found. Please try with different skills or interests.');
            return;
        }
        
        // Sort matches by score
        const sortedMatches = [...data.matches].sort((a, b) => b.score - a.score);
        
        let resultsHTML = `
            <div class="results-header mb-4">
                <h3>Your Career Path Recommendations</h3>
                <p class="text-muted">Based on your skills, interests, and market trends</p>
            </div>
        `;
        
        // Add top matches section
        resultsHTML += `
            <div class="career-matches">
                ${sortedMatches.map((match, index) => this.renderCareerMatch(match, index)).join('')}
            </div>
            
            <div class="career-history mt-5">
                <button class="btn btn-outline-secondary" id="show-history-btn">
                    <i class="bi bi-clock-history"></i> View Past Assessments
                </button>
            </div>
        `;
        
        // Update the container
        container.innerHTML = resultsHTML;
        container.style.display = 'block';
        
        // Add interaction handlers
        this.addResultInteractions();
    }

    renderCareerMatch(match, index) {
        const matchLevel = match.score >= 90 ? 'Excellent' : 
                           match.score >= 75 ? 'Strong' : 
                           match.score >= 60 ? 'Good' : 'Moderate';
        
        const matchColor = match.score >= 90 ? 'success' : 
                           match.score >= 75 ? 'primary' : 
                           match.score >= 60 ? 'info' : 'secondary';
                           
        return `
            <div class="career-match card mb-4 ${index === 0 ? 'border-success shadow' : ''}">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h4 class="mb-0">${match.title}</h4>
                        ${index === 0 ? '<span class="badge bg-success">Top Match</span>' : ''}
                    </div>
                    <div class="match-score">
                        <span class="badge bg-${matchColor} p-2">${match.score}% Match</span>
                        <span class="match-level ms-2">${matchLevel}</span>
                    </div>
                </div>
                
                <div class="card-body">
                    <p class="career-description">${match.description || 'No description available'}</p>
                    
                    <div class="matched-skills mb-3">
                        <h5>Skills Matched:</h5>
                        <div>
                            ${(match.matchedSkills || []).map(skill => 
                                `<span class="badge bg-light text-dark border me-2 mb-2">${skill}</span>`
                            ).join('')}
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between mt-4">
                        <button class="btn btn-outline-primary btn-sm view-details" data-career-id="${match.id || index}">
                            View Details
                        </button>
                        <button class="btn btn-outline-success btn-sm bookmark-career" data-career-id="${match.id || index}">
                            <i class="bi bi-bookmark"></i> Save
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    addResultInteractions() {
        // Add click handlers for buttons
        document.querySelectorAll('.view-details').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const careerId = e.target.getAttribute('data-career-id');
                this.viewCareerDetails(careerId);
            });
        });
        
        document.querySelectorAll('.bookmark-career').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const careerId = e.target.getAttribute('data-career-id');
                this.bookmarkCareer(careerId);
            });
        });
    }

    async bookmarkCareer(careerId) {
        if (!this.currentUser || !localStorage.getItem('token')) {
            this.showError('Please log in to bookmark careers');
            return false;
        }
        
        try {
            const response = await fetch(`${this.apiBaseUrl}/api/career/bookmarks`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-auth-token': localStorage.getItem('token')
                },
                body: JSON.stringify({ careerId })
            });
            
            if (response.ok) {
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error bookmarking career:', error);
            return false;
        }
    }

    /**
     * Fetches detailed information about a specific career
     * @param {string} careerId - The ID of the career to fetch details for
     */
    async getCareerDetails(careerId) {
        try {
            const response = await fetch(`${this.apiBaseUrl}/api/career/${careerId}`);
            if (response.ok) {
                return await response.json();
            }
            return null;
        } catch (error) {
            console.error('Error getting career details:', error);
            return null;
        }
    }

    async viewCareerDetails(careerId) {
        const career = await this.getCareerDetails(careerId);
        if (career) {
            this.showCareerModal(career);
        } else {
            this.showError('Unable to load career details');
        }
    }

    showCareerModal(career) {
        const modalId = 'careerDetailModal';
        
        // Remove existing modal if present
        const existingModal = document.getElementById(modalId);
        if (existingModal) {
            existingModal.remove();
        }
        
        // Create modal HTML
        const modalHTML = `
            <div class="modal fade" id="${modalId}" tabindex="-1" aria-labelledby="${modalId}Label" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="${modalId}Label">${career.title}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="career-details">
                                <h6>Description</h6>
                                <p>${career.description || 'No description available'}</p>
                                
                                <div class="row mt-4">
                                    <div class="col-md-6">
                                        <h6>Required Skills</h6>
                                        <ul class="list-group">
                                            ${(career.requiredSkills || []).map(skill => 
                                                `<li class="list-group-item">${skill}</li>`
                                            ).join('')}
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Salary Range</h6>
                                        <p>${career.salaryRange || 'Information not available'}</p>
                                        
                                        <h6 class="mt-3">Job Growth</h6>
                                        <p>${career.jobGrowth || 'Information not available'}</p>
                                    </div>
                                </div>
                                
                                <div class="learning-path mt-4">
                                    <h6>Recommended Learning Path</h6>
                                    <ol class="list-group list-group-numbered">
                                        ${(career.learningPath || []).map(step => 
                                            `<li class="list-group-item">${step}</li>`
                                        ).join('')}
                                    </ol>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary start-learning" data-career-id="${career.id}">
                                Start Learning Path
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Add modal to document
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Add event listener for the start learning button
        document.querySelector(`#${modalId} .start-learning`).addEventListener('click', () => {
            this.startLearningPath(career.id);
        });
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }

    startLearningPath(careerId) {
        // Redirect to courses page with career filter
        window.location.href = `courses.html?career=${careerId}`;
    }

    async loadUserHistory() {
        // Skip API calls if no user is logged in
        if (!this.currentUser || !localStorage.getItem('token')) {
            console.log('Using local history only - user not logged in');
            this.testHistory = this.getHistoryFromLocalStorage() || [];
            return;
        }
        
        // Try to get history from API, then fall back to local storage if needed
        try {
            let response = null;
            
            // Try multiple endpoints for history
            const endpoints = [
                '/api/career/history',
                '/api/career-assessment/history',
                '/api/career-test/history'
            ];
            
            for (const ep of endpoints) {
                try {
                    console.log(`Trying to load history from endpoint: ${this.apiBaseUrl}${ep}`);
                    response = await fetch(`${this.apiBaseUrl}${ep}`, {
                        headers: {
                            'x-auth-token': localStorage.getItem('token')
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        this.testHistory = data?.tests || [];
                        return;
                    }
                } catch (endpointError) {
                    console.warn(`Error loading history from ${ep}:`, endpointError);
                }
            }
            
            if (!this.testHistory || this.testHistory.length === 0) {
                // Try with a different API URL
                if (window.appConfig && typeof window.appConfig.tryNextFallback === 'function') {
                    const fallbackApiUrl = window.appConfig.tryNextFallback();
                    this.apiBaseUrl = fallbackApiUrl;
                    
                    try {
                        response = await fetch(`${fallbackApiUrl}/api/career/history`, {
                            headers: {
                                'x-auth-token': localStorage.getItem('token')
                            }
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            this.testHistory = data?.tests || [];
                        }
                    } catch (fallbackError) {
                        console.warn('Failed to load history using fallback API URL:', fallbackError);
                    }
                }
            }
            
            // If still no history from API, use local
            if (!this.testHistory || this.testHistory.length === 0) {
                this.loadLocalHistory();
            }
            
            // Check if we have locally stored history that needs to be merged
            this.mergeLocalHistory();
        } catch (error) {
            console.error('Error loading user history:', error);
            // Load local history as fallback
            this.loadLocalHistory();
        }
    }

    loadLocalHistory() {
        this.testHistory = this.getHistoryFromLocalStorage() || [];
    }
    
    getHistoryFromLocalStorage() {
        try {
            const localHistory = JSON.parse(localStorage.getItem('careerAssessmentHistory') || '[]');
            return localHistory.map(item => ({
                testDate: item.timestamp,
                results: item.result,
                fromLocal: true
            }));
        } catch (parseError) {
            console.error('Error parsing local history:', parseError);
            return [];
        }
    }
    
    /**
     * Merges local history with API history
     */
    mergeLocalHistory() {
        try {
            const localHistory = JSON.parse(localStorage.getItem('careerAssessmentHistory') || '[]');
            if (localHistory.length > 0) {
                console.log('Found', localHistory.length, 'local history entries to merge');
                
                // Only merge entries marked as pending sync
                const pendingEntries = localHistory.filter(item => item.pendingSync);
                if (pendingEntries.length === 0) return;
                
                // Add local entries to the history
                pendingEntries.forEach(item => {
                    this.testHistory.push({
                        testDate: item.timestamp,
                        results: item.result,
                        fromLocal: true
                    });
                });
                
                // Sort by date
                this.testHistory.sort((a, b) => new Date(b.testDate) - new Date(a.testDate));
                
                console.log('Merged local and API history');
                
                // Try to sync pending entries to the server
                this.syncLocalHistory(pendingEntries);
            }
        } catch (mergeError) {
            console.error('Error merging local history:', mergeError);
        }
    }
    
    /**
     * Attempts to sync local history with the server
     * @param {Array} pendingEntries - Array of pending history entries
     */
    async syncLocalHistory(pendingEntries) {
        if (!this.currentUser || pendingEntries.length === 0) return;
        
        try {
            let syncedCount = 0;
            
            for (const entry of pendingEntries) {
                try {
                    const response = await fetch(`${this.apiBaseUrl}/api/career-assessment/save-history`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-auth-token': localStorage.getItem('token')
                        },
                        body: JSON.stringify({
                            assessmentResult: entry.result,
                            timestamp: entry.timestamp
                        })
                    });
                    
                    if (response.ok) {
                        syncedCount++;
                        entry.pendingSync = false;
                    }
                } catch (syncError) {
                    console.error('Error syncing entry:', syncError);
                }
            }
            
            // Update localStorage with the new sync status
            if (syncedCount > 0) {
                const localHistory = JSON.parse(localStorage.getItem('careerAssessmentHistory') || '[]');
                localStorage.setItem('careerAssessmentHistory', JSON.stringify(localHistory));
                console.log(`${syncedCount}/${pendingEntries.length} history entries synced with server`);
            }
        } catch (error) {
            console.error('Error syncing local history:', error);
        }
    }

    toggleHistory() {
        const historyContainer = document.getElementById('history-container') || this.createHistoryContainer();
        
        if (historyContainer.style.display === 'none') {
            this.renderHistory();
            historyContainer.style.display = 'block';
        } else {
            historyContainer.style.display = 'none';
        }
    }

    createHistoryContainer() {
        const container = document.createElement('div');
        container.id = 'history-container';
        container.className = 'mt-4 p-3 border rounded bg-light';
        container.style.display = 'none';
        
        this.form.parentNode.insertBefore(container, this.suggestionDiv);
        return container;
    }

    renderHistory() {
        const container = document.getElementById('history-container');
        if (!container) return;
        
        if (!this.testHistory || this.testHistory.length === 0) {
            container.innerHTML = '<div class="alert alert-info">No test history found</div>';
            return;
        }
        
        let historyHTML = `
            <h4>Your Assessment History</h4>
            <p class="text-muted">Previous career assessments</p>
            <div class="list-group">
        `;
        
        this.testHistory.forEach((item, index) => {
            const date = new Date(item.testDate).toLocaleDateString();
            const time = new Date(item.testDate).toLocaleTimeString();
            
            historyHTML += `
                <div class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">Assessment #${this.testHistory.length - index}</h5>
                        <small>${date} at ${time}</small>
                    </div>
                    <p class="mb-1">
                        Top match: ${item.results?.matches?.[0]?.title || 'No matches found'}
                        ${item.results?.matches?.[0]?.score ? 
                            `<span class="badge bg-primary">${item.results.matches[0].score}% Match</span>` : ''}
                    </p>
                    <small>
                        ${item.fromLocal ? 
                            '<span class="badge bg-warning text-dark">Saved locally</span>' : 
                            '<span class="badge bg-success">Synced to account</span>'}
                    </small>
                </div>
            `;
        });
        
        historyHTML += `
            </div>
        `;
        
        container.innerHTML = historyHTML;
    }

    displayError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger';
        errorDiv.textContent = message;
        
        // Remove existing errors
        const existingErrors = document.querySelectorAll('.alert-danger');
        existingErrors.forEach(el => el.remove());
        
        // Add to suggestion div
        this.suggestionDiv.prepend(errorDiv);
        this.suggestionDiv.style.display = 'block';
        
        // Auto-remove after 5 seconds
        setTimeout(() => errorDiv.remove(), 5000);
    }

    showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container') || this.createToastContainer();
        
        const toast = document.createElement('div');
        toast.className = `toast show bg-${type} text-white`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        toast.innerHTML = `
            <div class="toast-header bg-${type} text-white">
                <strong class="me-auto">Career Test</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toast-container';
        container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        document.body.appendChild(container);
        return container;
    }
}
